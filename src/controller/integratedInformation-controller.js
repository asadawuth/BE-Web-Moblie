const prisma = require("../model/prisma.js");
const ExcelJS = require("exceljs");
const createError = require("../middleware/error.js");
const {
  createNowDataIntegratedInformation,
} = require("../validator/validator-integratedInformation.js");
exports.getDataIntegratedInformation = async (req, res, next) => {
  try {
    const dataBefore = await prisma.integratedinformation.findFirst({
      orderBy: {
        createdAt: "desc",
      },
      include: {
        user: {
          select: {
            firstName: true,
            lastName: true,
            status: true,
          },
        },
      },
    });
    res.status(200).json({ dataBefore });
  } catch (error) {
    next(error);
  }
};

exports.updataDataIntegratedInformation = async (req, res, next) => {
  try {
    const userId = req.user?.id;
    const { value, error } = createNowDataIntegratedInformation.validate(
      req.body
    );
    if (error) {
      return next(error);
    }

    const updatesData = await prisma.integratedinformation.create({
      data: {
        male: value.male,
        female: value.female,
        household: value.household,
        store: value.store,
        restaurant: value.restaurant,
        place: value.place,
        accommodation: value.accommodation,
        userId: userId,
      },
    });

    res.status(200).json({ updatesData });
  } catch (error) {
    next(error);
  }
};

/*
exports.saveDataIntegratedInformationExcel = async (req, res, next) => {
  try {
    // üëâ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const latestData = await prisma.integratedinformation.findFirst({
      orderBy: { createdAt: "desc" },
      include: {
        user: {
          select: {
            firstName: true,
            lastName: true,
            status: true,
          },
        },
      },
    });

    if (!latestData) {
      return next(createError("Data is not found.", 404));
    }

    // üëâ ‡∏•‡∏ö `userId` ‡πÅ‡∏•‡∏∞ `user` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    let columnNames = Object.keys(latestData).filter(
      (col) => col !== "userId" && col !== "user"
    );

    // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏° `firstName`, `lastName`, `status` ‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    columnNames.push("firstName", "lastName", "status");

    // üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á Workbook ‡πÅ‡∏•‡∏∞ Worksheet
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet("Integrated Data");

    // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏á‡πÑ‡∏õ
    worksheet.addRow(columnNames);

    // üëâ ‡πÅ‡∏õ‡∏•‡∏á `createdAt` ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const rowData = columnNames.map((col) => {
      if (col === "createdAt") {
        return new Date(latestData[col])
          .toISOString()
          .replace("T", " ")
          .slice(0, 19); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô `YYYY-MM-DD HH:mm:ss`
      }
      if (col === "firstName") return latestData.user?.firstName || "";
      if (col === "lastName") return latestData.user?.lastName || "";
      if (col === "status") return latestData.user?.status || "";
      return latestData[col]; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    });

    worksheet.addRow(rowData);

    // üëâ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    worksheet.columns.forEach((column) => {
      column.width = 20; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô 20
    });

    // üëâ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ response ‡πÉ‡∏´‡πâ Postman ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
    res.setHeader(
      "Content-Type",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );
    res.setHeader(
      "Content-Disposition",
      "attachment; filename=IntegratedInformation.xlsx"
    );

    // üëâ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Postman
    await workbook.xlsx.write(res);
    res.end();
  } catch (error) {
    next(error);
  }
};
*/
